Written September 10, 2018:



".../Java_Sim_Wrapper/source/" contains the source code for the wrapper and some example simulations written in Java. 

".../Java_Sim_Wrapper/build/" contains pre-compiled .jar files of both the simulations and the wrapper to test with.

".../Java_Sim_Wrapper/build/difference_sim/" and ".../Java_Sim_Wrapper/build/sum_sim/" each contain new and old files used to run a test. The reason they are separate is to allow different configuration files to be referenced: keeping two simulations in separate folders makes it easier to run them concurrently, without modifying configuration files in between.

In these two folders, the following configuration files are used:
- Settings.json
	- Describes what files to use for "global" and "configuration." Can be modified in between tests without compilation.
- GlobalVar.json
	- For "Variable" test, describes the messages and their format. Can be modified in between tests without compilation. 
	- (This file is not properly used in the Java version... so the exact format of this file can change to anything the C++ wrapper may need to help its design.)
- DifferenceVar.json or SumVar.json
	- These define parameters the simulation and wrapper need, including "hostName" and "portNumber" to connec to a server, the name of the simulation (case sensitive with respect to .jar containing simulation), subscribe and publish channels (with name of a variable in simulation to set as the value from a message).

The following .jar files are used:
- sum_sim_20180806.jar
	- Contains both "sum" and "difference" simulations in same .jar file (sorry for confusing name).
- SRTI_wrapper_20180906.jar
	- Contains generic wrapper that helps simulation connect to SRTI system.



How newest SRTI Wrapper works:
------------------------------
- A simulation must have publically-accessible variables that the wrapper can get and set to translate to messages sent to the RTI Server. This allows minimal concern on the part of the user to modify a simulation to work with the system. 
- The wrapper works in the following work:
	1) read input files.
	2) wait for subscribed messages, parse to sim variables when received.
	3) run "simulate()" function in sim, which must be defined to run 1 timestep of simulation.
	4) publish messages parsed from sim variables.
	5) Repeat steps 2)-4).
- By default, the wrapper will use exclusively JSON format for all data. It will convert data to string, but this could be improved in future implementations of the wrapper. Nested objects are not prepared by the wrapper, although the user could make such messages if using the RTILib API directly. The wrapper is capable of supporting arrays of any dimension and size. Data types can be set thanks to Java's reflection capabilities: it will check the sim's variable for its data type before attempting to convert data from a message.


To run example:
----------------------------
- First run RTI Server (.jar file) from main build folders..
- Run following command from "difference_sim" folder location:
	> java -cp "sum_sim_20180806.jar;SRTI_wrapper_20180906.jar" main.Wrapper
- Run following command from "sum_sim" folder loaction:
	> java -cp "sum_sim_20180806.jar;SRTI_wrapper_20180906.jar" main.Wrapper
- Observe data being sent over Server with debug output and GUI.
